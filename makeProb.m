function prob = makeProb(unordered)
% Initialize the container struct describing the search problem
if nargin==0
    unordered = true;
end
prob = struct(...
    'probtype', [],...
    'N', [],...
    'adj', [], ...
    'digr', [], ...
    'coords', [], ...
    'bounds', [],...
    'start', [], ...
    'goal', [], ...
    'occupancy', [], ...
    'axMap', [], ...
    'stops', [],...
    'verbose', [], ...
    'interval', [], ...
    'highlightn', [],...
    'PostProcessFcn', [],... % [population, prob] = PostProcessFcn(population, prob)
    'allPairsPaths', [], ...
    'costMatrix', [], ...
    'SelectionFcn',@selectionFunc,... % [parents, fitnessVals] = SelectionFcn(population, fitnessVals, num)
    'CrossoverFraction', 0.75,... % Fraction of new generation (minus elites) to breed from cross-over
    'CrossoverFcn',@crossoverFuncUnordered,... % kids = CrossoverFcn(parents, fitnessVals, nKids)
    'MutationFcn',@mutationFuncUnordered,... % chromosome = MutationFcn(chromosome)
    'PopulationSize',50,... % Size of each generation
    'CreationFcn',@creationFuncUnordered,... % population = CreationFcn(prob)
    'EliteCount',10, ... % Number of best performing population members to carry-through each generation
    'MaxGenerations', 25 ... % Number of generations
    );

if unordered
    prob.probtype="unordered";
    prob.SelectionFcn=@selectionFunc; % [parents, fitnessVals] = SelectionFcn(population, fitnessVals, num)
    prob.CrossoverFcn=@crossoverFuncUnordered; % kids = CrossoverFcn(parents, fitnessVals, nKids)
    prob.MutationFcn=@mutationFuncUnordered; % chromosome = MutationFcn(chromosome)
    prob.CreationFcn=@creationFuncUnordered; % population = CreationFcn(prob)
    prob.PostProcessFcn=@postProcessUnordered; % [population, prob] = PostProcessFcn(population, prob)
else
    prob.probtype="ordered";
    prob.SelectionFcn=@selectionFunc; % [parents, fitnessVals] = SelectionFcn(population, fitnessVals, num)
    prob.CrossoverFcn=@crossoverFunc; % kids = CrossoverFcn(parents, fitnessVals, nKids)
    prob.MutationFcn=[]; % chromosome = MutationFcn(chromosome)
    prob.CreationFcn=@creationFuncRnd; % population = CreationFcn(prob)
    prob.PostProcessFcn=[];
    prob.CrossoverFraction=1.0;
end
end
